@page "/Posts"
@attribute [Authorize]
@using System.Security.Claims
@using BlazorApp1.Services
@using DataTransferObjects
@inject AuthenticationStateProvider AuthProvider
@inject IPostService PostService
@inject ICommentService CommentService

<PageTitle>Post</PageTitle>

<AuthorizeView>
    <Authorized>
        <h3>Hello @context.User.Identity.Name</h3>
        @*<p>
            @context.User.Claims.First(claim => claim.Type.Equals(ClaimTypes.Role)).Value
        </p>
        <p>
            Your claims include:
            <ol>
                @foreach (Claim claim in context.User.Claims)
                {
                    <li>
                        <label>
                            @claim.Type: @claim.Value
                        </label>
                    </li>
                }
            </ol>
        </p>*@
        <h3>Write a Post!</h3>
        <div>
            <label>Title:</label>
            <InputText @bind-Value="title"/>
        </div>
        <div>
            <label>Content:</label>
            <InputTextArea @bind-Value="content"/>
        </div>
        <p>@commentCreated</p>
        <button class="btn btn-primary w-100" @onclick="TriggerSubmit">Create Post</button>

        <h4>
            <strong>View Posts</strong>
        </h4>
        <div>
            @if (posts.Count == 0)
            {
            <label>No posts to view</label>
            }
            else
            {
            @foreach (CompletePostDTO post in posts)
            {
            <div class="post-box" @onclick="() => ShowPostDetails(post)">
                <h8 class="post-title">@post.Title</h8>
                <p>by @post.Author</p>
            </div>
            }
            }
        </div>

        @if (selectedPost != null)
        {
        <div class="post-details">
            <h8>
                <strong>Post Details</strong>
            </h8>
            <p>
                <strong>Title:</strong> @selectedPost.Title
            </p>
            <p>
                <strong>Content:</strong> @selectedPost.Content
            </p>
            <p>
                <strong>Author:</strong> @selectedPost.Author
            </p>

            <h4>
                <strong>Comments</strong>
            </h4>
            @if (selectedPost.Comments.Count == 0)
            {
            <p>No comments yet.</p>
            }
            else
            {
            <ul>
                @foreach (var comment in selectedPost.Comments)
                {
                    <li>@comment.Commenter says:<br/>@comment.CommentBody</li>
                    
                }
            </ul>
            }

            <div>
                <label>Add a comment:</label>
                <InputText @bind-Value="commentText"/>
                <button class="btn btn-secondary" @onclick="AddComment">Add Comment</button>
            </div>
        </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private string post;
    private int userId;
    private string title;
    private string content;
    private string? author;
    private string commentText;
    private string commenter;
    private string commentCreated;
    private CompletePostDTO? selectedPost;

    private List<CompletePostDTO> posts
        = new();

    protected override async Task OnInitializedAsync()
    {
        commentCreated = "";
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            // the user is not logged in
            return;
        }

        author = claimsPrincipal.Identity?.Name;

        IEnumerable<Claim> claims = claimsPrincipal.Claims;
        string userIdAsString = claims.Single(c => c.Type == ClaimTypes.NameIdentifier).Value;
        userId = int.Parse(userIdAsString);
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        List<CompletePostDTO> fetchedPosts = await PostService.GetPostsAsync();
        posts = fetchedPosts;
    }


    private async Task HandleSubmit()
    {
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(content) && author is not null && claimsPrincipal.Identity is not null && claimsPrincipal.Identity.IsAuthenticated)
        {
            var newPost = new CreatePostDTO
            {
                Title = title,
                Content = content,
                Author = author
            };
            CompletePostDTO createdPost = await PostService.AddPostAsync(newPost);
            posts.Add(createdPost);
            post = title;
            title = string.Empty;
            content = string.Empty;
            author = string.Empty;
            commentCreated = "Post created successfully! Title: " + title;
        }
        else
        {
            commentCreated = "No fields should be empty.";
        }
    }


    private async Task TriggerSubmit()
    {
        await HandleSubmit();
    }

    private void ShowPostDetails(CompletePostDTO post)
    {
        selectedPost = post;
    }

    private async Task AddComment()
    {
        if (!string.IsNullOrEmpty(commentText) && !string.IsNullOrEmpty(commenter) && selectedPost != null)
        {
            var newComment = new CreateCommentDto
            {
                CommentBody = commentText,
                Commenter = commenter,
                PostId = selectedPost.Id
            };
            CommentDTO createdComment = await CommentService.AddCommentAsync(newComment);
            selectedPost.Comments.Add(createdComment);
            commentText = string.Empty;
            commenter = string.Empty;
        }
    }
}


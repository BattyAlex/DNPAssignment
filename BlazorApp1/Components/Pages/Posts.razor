@page "/Posts"
@page "/post"
@using BlazorApp1.Services
@using DataTransferObjects
@using Microsoft.AspNetCore.Authorization
@inject IPostService PostService
@inject ICommentService CommentService
<PageTitle>Post</PageTitle>

<h3>Write a Post!</h3>

@if (!string.IsNullOrEmpty(post))
{
    <p>Post created successfully! Title: @post</p>
}

@code {
    private string post;
    private string title;
    private string content;
    private string author;
    private string commentText;
    private string commenter;
    private CompletePostDTO? selectedPost;

    private List<CompletePostDTO> posts
        = new ();

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        List<CompletePostDTO> fetchedPosts = await PostService.GetPostsAsync();
        posts = fetchedPosts;
            
    }


    private async Task HandleSubmit()
    {
        if (!string.IsNullOrEmpty(title) && !string.IsNullOrEmpty(content) && !string.IsNullOrEmpty(author))
        {
            var newPost = new CreatePostDTO
            {
                Title = title,
                Content = content,
                Author = author
            };
            CompletePostDTO createdPost = await PostService.AddPostAsync(newPost);
            posts.Add(createdPost);
            post = title;
            title = string.Empty;
            content = string.Empty;
            author = string.Empty;
        }
        else
        {
            Console.WriteLine("No fields should be empty.");
        }
    }


    private async Task TriggerSubmit()
    {
        await HandleSubmit();
    }

    private void ShowPostDetails(CompletePostDTO post)
    {
        selectedPost = post;
    }

    private async Task AddComment()
    {
        if (!string.IsNullOrEmpty(commentText) && !string.IsNullOrEmpty(commenter) && selectedPost != null)
        {
            var newComment = new CreateCommentDto
            {
                CommentBody = commentText,
                Commenter = commenter,
                PostId = selectedPost.Id
            };
            CommentDTO createdComment = await CommentService.AddCommentAsync(newComment);
            selectedPost.Comments.Add(createdComment);
            commentText = string.Empty;
            commenter = string.Empty;
        }
    }

}

}

<div>
    <label>Title:</label>
    <InputText @bind-Value="title"/>
</div>
<div>
    <label>Content:</label>
    <InputTextArea @bind-Value="content"/>
</div>
<div>
    <label>Author:</label>
    <InputText @bind-Value="author"/>
</div>
<button class="btn btn-primary w-100" @onclick="TriggerSubmit">Create Post</button>

<h4>
    <strong>View Posts</strong>
</h4>
<div>
    @if (posts.Count == 0)
    {
        <label>No posts to view</label>
    }
    else
    {
        @foreach (CompletePostDTO post in posts)
        {
            <div class="post-box" @onclick="() => ShowPostDetails(post)">
                <h8 class="post-title">@post.Title</h8>
                <p>by @post.Author</p>
            </div>
        }
    }
</div>

@if (selectedPost != null)
{
    <div class="post-details">
        <h8>
            <strong>Post Details</strong>
        </h8>
        <p>
            <strong>Title:</strong> @selectedPost.Title
        </p>
        <p>
            <strong>Content:</strong> @selectedPost.Content
        </p>
        <p>
            <strong>Author:</strong> @selectedPost.Author
        </p>

        <h4>
            <strong>Comments</strong>
        </h4>
        @if (selectedPost.Comments.Count == 0)
        {
            <p>No comments yet.</p>
        }
        else
        {
            <ul>
                @foreach (var comment in selectedPost.Comments)
                {
                    <li>@comment</li>
                }
            </ul>
        }

        <div>
            <label>Add a comment:</label>
            <InputText @bind-Value="commentText"/>
            <button class="btn btn-secondary" @onclick="AddComment">Add Comment</button>
        </div>
    </div>
}